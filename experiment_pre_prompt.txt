修改上述代码，使其在

受试者姓名：吴羽戴翔
实验完成状况：
    实验总数: 4
    实验已完成数量: 4
    实验完成细节:
        experiment_infographicl: 1
        experiment_layout: 1
        experiment_prominence: 1
        experiment_therapy: 1
    


{
  "受试者姓名": "吴羽戴翔",
  "实验完成状况": {
    "实验总数": 4,
    "实验已完成数量": 4,
    "实验完成细节": {
      "experiment_infographicl": 1,
      "experiment_layout": 1,
      "experiment_prominence": 1,
      "experiment_therapy": 1
    }
  }
}

修改上述代码，使用 iframe 框架来替换html跳转，当跳转到新页面的时候，隐藏当前页面，然后让新页面全面占比当前html；
新的html结束的时候，隐藏该html，并且让其旧的html重新显示；

修改上述代码，要求实现如下功能：
1.在完成一个实验后，将该实验按钮变黑禁止，即每个实验只允许完成一次，但是可以在页面刷新后重置按钮状态；
2.在该布局的右上角添加一个输入框和按钮框，受试者会在该输入框输入名字，然后点击按钮保存，实验的数据收集文件名将以:
${受试者名称}-${年}${月}${日}-${时}${分}${秒} ，并且该文件名会传递给子html，子html中会同样保存该名称作为文件名；
3.在完成所有的实验后，将弹出提示“所有实验已完成”，请保存号实验数据收集文件${实验数据文件}，并将其发送给实验方；
4.在完成所有的实验后，还要实现一个功能，即读取4个子实验所保存到4个csv文件，每个子实验的csv文件命名格式都是按照 
${数据收集文件名}-${子实验名称}.csv 格式命名的，分别读取4个文件，然后保存到一个新的csv文件中，每个子csv文件数据在新的csv文件中纵向排列，然后以一个空的行来间隔：





修改上述代码，实现下列功能：
1.对于 localStorage 保存中的数据，每次页面刷新后，都要清除掉所有的旧数据；

子实验中对文件名的获取和保存逻辑如下：
const urlParams = new URLSearchParams(window.location.search);
        const filename = urlParams.get('filename');
function downloadCSV() {
            if (csvData.length > 1) { // 确保有数据（表头 + 至少一行数据）
                const blob = new Blob([csvData.join('\n')], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = csvFileName; // 始终使用同一个文件名
                link.click();
                URL.revokeObjectURL(link.href); // 释放内存

                // 保存数据到 localStorage
                saveData(csvData.join('\n'));
            }
        }

        function saveData(data) {
            localStorage.setItem(`${filename}-infographic`, data);
            window.parent.postMessage('experiment_completed', '*');
        }

window.onbeforeunload = function(event) {
                if (currentLayout <= experimentConfig.totalLayouts || formalCount < experimentConfig.formalTrials) {
                    // 如果实验未完成，保存当前数据
                    downloadCSV();
                    window.parent.postMessage('experiment_completed', '*');
                }
            };





修复上述代码中的逻辑错误，尤其是experimentConfig对全局的参数控制逻辑





在上述代码的基础上，在每道题的时候(showStimulus阶段)，添加两个按钮，分别是上一题和下一题；
如果选择了下一题按钮，则直接进入下一道题，当前题目的用户已回答的数据则记录下来，未作答的数据中 check、reaction time、user-answer 全部记为 "Skipped"，同时对应的各类参数也要同步修改；
如果选择了上一题按钮，则直接跳到上一题，但是上一题的数据不做修改，除非用户重新作答，则使用用户新作答的数据覆盖旧有数据；
只要点击了任意（上一题或者下一题）按钮，则直接重置题目的计时器，包括 image 和 Question 的显示，并重置其定时器，同时对于问题显示 showQuestion，也需要重置其定时器，即跳到其他问题时，取消掉旧问题的问题显示；
在上一题和下一题按钮也需要注意，上一题或者下一题必须存在，不能盲目地+1或-1，而是要和 experimentConfig 参数对应比较；
并且跳过时也只是跳过 Question 和 img 显示，但是练习阶段到正式阶段过度的提示词、totalLayouts 之间切换的提示词都要保留；
在每次image下方，都显示出当前所处阶段，如：变量1-练习1；
在上一题和下一题按钮切换的时候，也需要注意 experimentConfig.totalLayouts 的切换；
当 formalCount 到 formalTrials 的时候，再次点击下一题，将切换成下一个 Layouts 的第一个 practice，并重置对应参数；
当 practiceCount 到 1 的时候，再次点击上一题，将切换成上一个 Layouts 的最后一个 formal，并重置对应参数；
当到了 experimentConfig.totalLayouts 布局的最后一个 formal 时，如果再次点击下一题，则提示实验结束，走正常的实验结束流程；
