<!-- First segment (Red) -->
                <circle class="semi-circle gauge-red" cx="5" cy="40" r="90" stroke="red" fill="none" stroke-width="10"
                stroke-dasharray="213.47 351.017" stroke-dashoffset="121.37"/>
                <!-- Second segment (Green) -->
                <circle class="semi-circle gauge-green" cx="5" cy="40" r="90" stroke="green" fill="none" stroke-width="10"
                stroke-dasharray="27.27 537.217" stroke-dashoffset="-94.101"/>
                
参考上述代码，以实现下列功能：
1.总弧度是为和上述加起来的弧度相同，为 213.47 + 27.27 并且起始弧度位置为 121.37 + 213.47 红色，现在要将其均匀切分成 5 份，假设这 5 份合计值为 140 ，
那么 5 份则分别占比： 0-50 50-60 60-100 100-120 120-140 颜色分别为 红1、黄1、绿、黄2、红2;
2.参考上述代码实现，其中红色的左边作为起点、绿色的右边作为终点，将其间的长度进行比例划分，并且要求其各个部分首尾相连且不重叠；

2.这个过程中，要求对于 红1 stroke-dasharray="213.47 351.017" 的 两个数相加之和 不变（保证起始位置不变），以及 红2 的 27.27 537.217

216.61 + 28.84 + 1.57 = 247.02
(90/360) * 2π * 90 ≈ 141.37
1/360 * 2 * 3.14 * 90 = 1.57 / 2 = 0.785

stroke-dasharray="213.47 351.017" stroke-dashoffset="121.37"/>




157.33 度切分成 140 单位，再分为 5 份，每份占比分别对应： 0-50 50-60 60-100 100-120 120-140 ，则每份对应占比多少度？
将每次的计算结果的纯数值分别放在同一行；

将对应度数再 / 360 * 2 * 3.14 *90 计算得到结果分别是多少弧度，用 X 代表？
将每次的计算结果的纯数值 X 分别放在同一行；

将所有弧度值 X 分别减去 1.57 后，计算结果又分别是多少，用 Y 代表？
将每次的计算结果的纯数值 Y 分别放在同一行；

再将得到的弧度 Y 用 564.487 去减，又会得到多少间隔的弧度，用 T 代表？
将每次的计算结果的纯数值 T 分别放在同一行；

然后第一份以弧度 122.94 为起点，依次计算 Y 的偏移，并且每一份之间的间隔为 1.57 弧度；
例如，假设第一份计算得到弧度为 10 ，则第二份的起始偏移为 121.37 - 10 - 1.57 = 109.8 ， 以此类推；





157.33 度切分为 2 份，每份占比分别单位的值对应： 2 : 1 ，则每份对应占比多少度？
将每次的计算结果的纯数值分别放在同一行；

将对应度数再 / 360 * 2 * 3.14 *90 计算得到结果分别是多少弧度，用 X 代表？
将每次的计算结果的纯数值 X 分别放在同一行；

将所有弧度值 X 分别减去 1.57 后，计算结果又分别是多少，用 Y 代表？
将每次的计算结果的纯数值 Y 分别放在同一行；

再将得到的弧度 Y 用 564.487 去减，又会得到多少间隔的弧度，用 T 代表？
将每次的计算结果的纯数值 T 分别放在同一行；

然后第一份以弧度 122.94 为起点，依次计算 Y 的偏移，并且每一份之间的间隔为 1.57 弧度；
例如，假设第一份计算得到弧度为 10 ，则第二份的起始偏移为 121.37 - 10 - 1.57 = 109.8 ， 以此类推；





修改上述代码，将其根据数值重新按比例进行 angle_after_convert 计算，要求如下：
在 value 为 33-35.5 时 angle_after_convert 对应度数均匀转变为 0-20 度，
在 value 为 35.5-36 时 angle_after_convert 对应度数均匀转变为 20-40 度，
在 value 为 36-37.3 时 angle_after_convert 对应度数均匀转变为 40-80 度，
在 value 为 37.3-38 时 angle_after_convert 对应度数均匀转变为 80-100 度，
在 value 为 38-42 时 angle_after_convert 对应度数均匀转变为 100-120 度，
在 value 小于 33 时 angle_after_convert 对应度数为 0 度，
在 value 大于 42 时 angle_after_convert 对应度数为 120 度

修改上述代码，将其根据数值重新按比例进行 angle_after_convert 计算，要求如下：
在 value 为 0-90 时 angle_after_convert 对应度数均匀转变为 0-80 度，
在 value 为 90-100 时 angle_after_convert 对应度数均匀转变为 80-120 度，
在 value 小于 0 时 angle_after_convert 对应度数为 0 度，
在 value 大于 100 时 angle_after_convert 对应度数为 120 度





修改上述代码，要求：
1.修改 CPRMonitor 使其能够通过 selectStyle 函数调整其 depth 生成，不再依赖于 generatePressDepth 函数随机生成，而是根据 compressionStyles 的不同 style ，
在 transitionTime 内，从 initial 的 depth 的 min 到 max 之间随机生成，逐渐变为在 target 的 depth 的 min 到 max 之间随机生成；
2. CPRMonitor 的 randomIntervals 也不再是固定的，而是和 depth 一样，读取 compressionStyles 的不同 style ，
在 transitionTime 内，从 initial 的 interval 的 min 到 max 之间随机生成，逐渐变为在 target 的 interval 的 min 到 max 之间随机生成；
3.每次点击按钮，触发 selectStyle 函数调用时，都需要清空所有旧信息、重新生成 CPRMonitor ，并根据对应的 style 进行数据变化
